{"version":3,"sources":["RefreshButton.js","App.js","serviceWorker.js","index.js"],"names":["RefreshButton","buttonClick","className","type","value","onClick","App","onButtonClick","setState","number","trivia","fetch","then","resp","json","data","text","onSearchChange","event","searchfield","target","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAeeA,EAbO,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACpB,OACI,yBAAKC,UAAU,MACX,2BACIC,KAAK,SACLC,MAAM,eACNC,QAASJ,EACTC,UAAU,yCC0DXI,G,wDA7Db,aAAe,IAAD,8BACZ,gBAgBFC,cAAe,WACb,EAAKC,SAAS,CAAEC,OAAQ,eACxB,EAAKD,SAAS,CAAEE,OAAQ,KAExBC,MAAM,4CACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,EAAKP,SAAS,CAAEC,OAAQM,EAAKN,SAC7B,EAAKD,SAAS,CAAEE,OAAQK,EAAKC,WAzBnB,EA6BdC,eAAiB,SAACC,GACd,EAAKV,SAAS,CAAEW,YAAYD,EAAME,OAAOhB,SA5B3C,EAAKiB,MAAQ,CACXZ,OAAQ,GACRC,OAAQ,IAJE,E,gEAQO,IAAD,OAClBC,MAAM,4CACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,EAAKP,SAAS,CAAEC,OAAQM,EAAKN,SAC7B,EAAKD,SAAS,CAAEE,OAAQK,EAAKC,Y,+BAoBvB,IAAD,EACoBM,KAAKD,MAAxBZ,EADD,EACCA,OAAQC,EADT,EACSA,OAChB,MAAkB,KAAXD,EAEL,6BACE,wBAAIP,UAAU,gBAAd,kBACA,yBAAKA,UAAU,WACb,uBAAGA,UAAU,cAAb,gBAEF,kBAAC,EAAD,CAAeD,YAAaqB,KAAKf,cAAeL,UAAU,OAC1D,uBAAGA,UAAU,cAAb,sDAKF,6BACE,wBAAIA,UAAU,gBAAd,kBACA,yBAAKA,UAAU,WACb,uBAAGA,UAAU,cAAcO,GAC3B,uBAAGP,UAAU,cAAcQ,IAE7B,kBAAC,EAAD,CAAeT,YAAaqB,KAAKf,cAAeL,UAAU,OAC1D,uBAAGA,UAAU,cAAb,0D,GAxDUqB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.00492477.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst RefreshButton = ({buttonClick}) => {\r\n    return (\r\n        <div className='tc'>\r\n            <input \r\n                type=\"button\" \r\n                value='Refresh Fact' \r\n                onClick={buttonClick}\r\n                className='bg-lightest-blue blue pa3 br3 f5 b'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RefreshButton;","import React, {Component } from 'react';\r\nimport RefreshButton from './RefreshButton'\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      number: '',\r\n      trivia: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://numbersapi.com/random/trivia?json')\r\n    .then(resp => resp.json())\r\n    .then(data => {\r\n      this.setState({ number: data.number })\r\n      this.setState({ trivia: data.text })\r\n    })\r\n  }\r\n\r\n  onButtonClick= () => {\r\n    this.setState({ number: 'Loading...' })\r\n    this.setState({ trivia: '' })\r\n\r\n    fetch('http://numbersapi.com/random/trivia?json')\r\n    .then(resp => resp.json())\r\n    .then(data => {\r\n      this.setState({ number: data.number })\r\n      this.setState({ trivia: data.text })\r\n    })\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n      this.setState({ searchfield:event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { number, trivia } = this.state;\r\n    return number === '' ?\r\n    (\r\n      <div>\r\n        <h1 className='tc f1 b blue'>Number Trivia!</h1>\r\n        <div className=\"infoBox\">\r\n          <p className='tc f2 blue'>Loading....</p>\r\n        </div>\r\n        <RefreshButton buttonClick={this.onButtonClick} className='tc'/>\r\n        <p className=\"tc f6 blue\">Warning: This may take a few moments to complete.</p>\r\n      </div> \r\n\r\n    ) : (\r\n\r\n      <div>\r\n        <h1 className='tc f1 b blue'>Number Trivia!</h1>\r\n        <div className=\"infoBox\">\r\n          <p className='tc f2 blue'>{number}</p>\r\n          <p className='tc f4 blue'>{trivia}</p>\r\n        </div>\r\n        <RefreshButton buttonClick={this.onButtonClick} className='tc'/>\r\n        <p className=\"tc f6 blue\">Warning: This may take a few moments to complete.</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}